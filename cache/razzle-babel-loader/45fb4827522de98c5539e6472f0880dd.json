{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport escapeStringRegexp from 'escape-string-regexp';\nimport transliterate from '@sindresorhus/transliterate';\nimport builtinOverridableReplacements from './overridable-replacements.js';\n\nconst decamelize = string => {\n  return string // Separate capitalized words.\n  .replace(/([A-Z]{2,})(\\d+)/g, '$1 $2').replace(/([a-z\\d]+)([A-Z]{2,})/g, '$1 $2').replace(/([a-z\\d])([A-Z])/g, '$1 $2').replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1 $2');\n};\n\nconst removeMootSeparators = (string, separator) => {\n  const escapedSeparator = escapeStringRegexp(separator);\n  return string.replace(new RegExp(`${escapedSeparator}{2,}`, 'g'), separator).replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}$`, 'g'), '');\n};\n\nexport default function slugify(string, options) {\n  if (typeof string !== 'string') {\n    throw new TypeError(`Expected a string, got \\`${typeof string}\\``);\n  }\n\n  options = _objectSpread({\n    separator: '-',\n    lowercase: true,\n    decamelize: true,\n    customReplacements: [],\n    preserveLeadingUnderscore: false,\n    preserveTrailingDash: false\n  }, options);\n  const shouldPrependUnderscore = options.preserveLeadingUnderscore && string.startsWith('_');\n  const shouldAppendDash = options.preserveTrailingDash && string.endsWith('-');\n  const customReplacements = new Map([...builtinOverridableReplacements, ...options.customReplacements]);\n  string = transliterate(string, {\n    customReplacements\n  });\n\n  if (options.decamelize) {\n    string = decamelize(string);\n  }\n\n  let patternSlug = /[^a-zA-Z\\d]+/g;\n\n  if (options.lowercase) {\n    string = string.toLowerCase();\n    patternSlug = /[^a-z\\d]+/g;\n  }\n\n  string = string.replace(patternSlug, options.separator);\n  string = string.replace(/\\\\/g, '');\n\n  if (options.separator) {\n    string = removeMootSeparators(string, options.separator);\n  }\n\n  if (shouldPrependUnderscore) {\n    string = `_${string}`;\n  }\n\n  if (shouldAppendDash) {\n    string = `${string}-`;\n  }\n\n  return string;\n}\nexport function slugifyWithCounter() {\n  const occurrences = new Map();\n\n  const countable = (string, options) => {\n    string = slugify(string, options);\n\n    if (!string) {\n      return '';\n    }\n\n    const stringLower = string.toLowerCase();\n    const numberless = occurrences.get(stringLower.replace(/(?:-\\d+?)+?$/, '')) || 0;\n    const counter = occurrences.get(stringLower);\n    occurrences.set(stringLower, typeof counter === 'number' ? counter + 1 : 1);\n    const newCounter = occurrences.get(stringLower) || 2;\n\n    if (newCounter >= 2 || numberless > 2) {\n      string = `${string}-${newCounter}`;\n    }\n\n    return string;\n  };\n\n  countable.reset = () => {\n    occurrences.clear();\n  };\n\n  return countable;\n}","map":{"version":3,"sources":["/sandbox/node_modules/@sindresorhus/slugify/index.js"],"names":["escapeStringRegexp","transliterate","builtinOverridableReplacements","decamelize","string","replace","removeMootSeparators","separator","escapedSeparator","RegExp","slugify","options","TypeError","lowercase","customReplacements","preserveLeadingUnderscore","preserveTrailingDash","shouldPrependUnderscore","startsWith","shouldAppendDash","endsWith","Map","patternSlug","toLowerCase","slugifyWithCounter","occurrences","countable","stringLower","numberless","get","counter","set","newCounter","reset","clear"],"mappings":"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","sourcesContent":["import escapeStringRegexp from 'escape-string-regexp';\nimport transliterate from '@sindresorhus/transliterate';\nimport builtinOverridableReplacements from './overridable-replacements.js';\n\nconst decamelize = string => {\n\treturn string\n\t\t// Separate capitalized words.\n\t\t.replace(/([A-Z]{2,})(\\d+)/g, '$1 $2')\n\t\t.replace(/([a-z\\d]+)([A-Z]{2,})/g, '$1 $2')\n\n\t\t.replace(/([a-z\\d])([A-Z])/g, '$1 $2')\n\t\t.replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1 $2');\n};\n\nconst removeMootSeparators = (string, separator) => {\n\tconst escapedSeparator = escapeStringRegexp(separator);\n\n\treturn string\n\t\t.replace(new RegExp(`${escapedSeparator}{2,}`, 'g'), separator)\n\t\t.replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}$`, 'g'), '');\n};\n\nexport default function slugify(string, options) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got \\`${typeof string}\\``);\n\t}\n\n\toptions = {\n\t\tseparator: '-',\n\t\tlowercase: true,\n\t\tdecamelize: true,\n\t\tcustomReplacements: [],\n\t\tpreserveLeadingUnderscore: false,\n\t\tpreserveTrailingDash: false,\n\t\t...options\n\t};\n\n\tconst shouldPrependUnderscore = options.preserveLeadingUnderscore && string.startsWith('_');\n\tconst shouldAppendDash = options.preserveTrailingDash && string.endsWith('-');\n\n\tconst customReplacements = new Map([\n\t\t...builtinOverridableReplacements,\n\t\t...options.customReplacements\n\t]);\n\n\tstring = transliterate(string, {customReplacements});\n\n\tif (options.decamelize) {\n\t\tstring = decamelize(string);\n\t}\n\n\tlet patternSlug = /[^a-zA-Z\\d]+/g;\n\n\tif (options.lowercase) {\n\t\tstring = string.toLowerCase();\n\t\tpatternSlug = /[^a-z\\d]+/g;\n\t}\n\n\tstring = string.replace(patternSlug, options.separator);\n\tstring = string.replace(/\\\\/g, '');\n\tif (options.separator) {\n\t\tstring = removeMootSeparators(string, options.separator);\n\t}\n\n\tif (shouldPrependUnderscore) {\n\t\tstring = `_${string}`;\n\t}\n\n\tif (shouldAppendDash) {\n\t\tstring = `${string}-`;\n\t}\n\n\treturn string;\n}\n\nexport function slugifyWithCounter() {\n\tconst occurrences = new Map();\n\n\tconst countable = (string, options) => {\n\t\tstring = slugify(string, options);\n\n\t\tif (!string) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst stringLower = string.toLowerCase();\n\t\tconst numberless = occurrences.get(stringLower.replace(/(?:-\\d+?)+?$/, '')) || 0;\n\t\tconst counter = occurrences.get(stringLower);\n\t\toccurrences.set(stringLower, typeof counter === 'number' ? counter + 1 : 1);\n\t\tconst newCounter = occurrences.get(stringLower) || 2;\n\t\tif (newCounter >= 2 || numberless > 2) {\n\t\t\tstring = `${string}-${newCounter}`;\n\t\t}\n\n\t\treturn string;\n\t};\n\n\tcountable.reset = () => {\n\t\toccurrences.clear();\n\t};\n\n\treturn countable;\n}\n"]},"metadata":{},"sourceType":"module"}