{"ast":null,"code":"import _toConsumableArray from \"/sandbox/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/sandbox/node_modules/babel-preset-razzle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport escapeStringRegexp from 'escape-string-regexp';\nimport transliterate from '@sindresorhus/transliterate';\nimport builtinOverridableReplacements from './overridable-replacements.js';\n\nvar decamelize = function decamelize(string) {\n  return string // Separate capitalized words.\n  .replace(/([A-Z]{2,})(\\d+)/g, '$1 $2').replace(/([a-z\\d]+)([A-Z]{2,})/g, '$1 $2').replace(/([a-z\\d])([A-Z])/g, '$1 $2').replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1 $2');\n};\n\nvar removeMootSeparators = function removeMootSeparators(string, separator) {\n  var escapedSeparator = escapeStringRegexp(separator);\n  return string.replace(new RegExp(\"\".concat(escapedSeparator, \"{2,}\"), 'g'), separator).replace(new RegExp(\"^\".concat(escapedSeparator, \"|\").concat(escapedSeparator, \"$\"), 'g'), '');\n};\n\nexport default function slugify(string, options) {\n  if (typeof string !== 'string') {\n    throw new TypeError(\"Expected a string, got `\".concat(typeof string, \"`\"));\n  }\n\n  options = _objectSpread({\n    separator: '-',\n    lowercase: true,\n    decamelize: true,\n    customReplacements: [],\n    preserveLeadingUnderscore: false,\n    preserveTrailingDash: false\n  }, options);\n  var shouldPrependUnderscore = options.preserveLeadingUnderscore && string.startsWith('_');\n  var shouldAppendDash = options.preserveTrailingDash && string.endsWith('-');\n  var customReplacements = new Map([].concat(_toConsumableArray(builtinOverridableReplacements), _toConsumableArray(options.customReplacements)));\n  string = transliterate(string, {\n    customReplacements: customReplacements\n  });\n\n  if (options.decamelize) {\n    string = decamelize(string);\n  }\n\n  var patternSlug = /[^a-zA-Z\\d]+/g;\n\n  if (options.lowercase) {\n    string = string.toLowerCase();\n    patternSlug = /[^a-z\\d]+/g;\n  }\n\n  string = string.replace(patternSlug, options.separator);\n  string = string.replace(/\\\\/g, '');\n\n  if (options.separator) {\n    string = removeMootSeparators(string, options.separator);\n  }\n\n  if (shouldPrependUnderscore) {\n    string = \"_\".concat(string);\n  }\n\n  if (shouldAppendDash) {\n    string = \"\".concat(string, \"-\");\n  }\n\n  return string;\n}\nexport function slugifyWithCounter() {\n  var occurrences = new Map();\n\n  var countable = function countable(string, options) {\n    string = slugify(string, options);\n\n    if (!string) {\n      return '';\n    }\n\n    var stringLower = string.toLowerCase();\n    var numberless = occurrences.get(stringLower.replace(/(?:-\\d+?)+?$/, '')) || 0;\n    var counter = occurrences.get(stringLower);\n    occurrences.set(stringLower, typeof counter === 'number' ? counter + 1 : 1);\n    var newCounter = occurrences.get(stringLower) || 2;\n\n    if (newCounter >= 2 || numberless > 2) {\n      string = \"\".concat(string, \"-\").concat(newCounter);\n    }\n\n    return string;\n  };\n\n  countable.reset = function () {\n    occurrences.clear();\n  };\n\n  return countable;\n}","map":{"version":3,"sources":["/sandbox/node_modules/@sindresorhus/slugify/index.js"],"names":["escapeStringRegexp","transliterate","builtinOverridableReplacements","decamelize","string","replace","removeMootSeparators","separator","escapedSeparator","RegExp","slugify","options","TypeError","lowercase","customReplacements","preserveLeadingUnderscore","preserveTrailingDash","shouldPrependUnderscore","startsWith","shouldAppendDash","endsWith","Map","patternSlug","toLowerCase","slugifyWithCounter","occurrences","countable","stringLower","numberless","get","counter","set","newCounter","reset","clear"],"mappings":"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","sourcesContent":["import escapeStringRegexp from 'escape-string-regexp';\nimport transliterate from '@sindresorhus/transliterate';\nimport builtinOverridableReplacements from './overridable-replacements.js';\n\nconst decamelize = string => {\n\treturn string\n\t\t// Separate capitalized words.\n\t\t.replace(/([A-Z]{2,})(\\d+)/g, '$1 $2')\n\t\t.replace(/([a-z\\d]+)([A-Z]{2,})/g, '$1 $2')\n\n\t\t.replace(/([a-z\\d])([A-Z])/g, '$1 $2')\n\t\t.replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, '$1 $2');\n};\n\nconst removeMootSeparators = (string, separator) => {\n\tconst escapedSeparator = escapeStringRegexp(separator);\n\n\treturn string\n\t\t.replace(new RegExp(`${escapedSeparator}{2,}`, 'g'), separator)\n\t\t.replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}$`, 'g'), '');\n};\n\nexport default function slugify(string, options) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got \\`${typeof string}\\``);\n\t}\n\n\toptions = {\n\t\tseparator: '-',\n\t\tlowercase: true,\n\t\tdecamelize: true,\n\t\tcustomReplacements: [],\n\t\tpreserveLeadingUnderscore: false,\n\t\tpreserveTrailingDash: false,\n\t\t...options\n\t};\n\n\tconst shouldPrependUnderscore = options.preserveLeadingUnderscore && string.startsWith('_');\n\tconst shouldAppendDash = options.preserveTrailingDash && string.endsWith('-');\n\n\tconst customReplacements = new Map([\n\t\t...builtinOverridableReplacements,\n\t\t...options.customReplacements\n\t]);\n\n\tstring = transliterate(string, {customReplacements});\n\n\tif (options.decamelize) {\n\t\tstring = decamelize(string);\n\t}\n\n\tlet patternSlug = /[^a-zA-Z\\d]+/g;\n\n\tif (options.lowercase) {\n\t\tstring = string.toLowerCase();\n\t\tpatternSlug = /[^a-z\\d]+/g;\n\t}\n\n\tstring = string.replace(patternSlug, options.separator);\n\tstring = string.replace(/\\\\/g, '');\n\tif (options.separator) {\n\t\tstring = removeMootSeparators(string, options.separator);\n\t}\n\n\tif (shouldPrependUnderscore) {\n\t\tstring = `_${string}`;\n\t}\n\n\tif (shouldAppendDash) {\n\t\tstring = `${string}-`;\n\t}\n\n\treturn string;\n}\n\nexport function slugifyWithCounter() {\n\tconst occurrences = new Map();\n\n\tconst countable = (string, options) => {\n\t\tstring = slugify(string, options);\n\n\t\tif (!string) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst stringLower = string.toLowerCase();\n\t\tconst numberless = occurrences.get(stringLower.replace(/(?:-\\d+?)+?$/, '')) || 0;\n\t\tconst counter = occurrences.get(stringLower);\n\t\toccurrences.set(stringLower, typeof counter === 'number' ? counter + 1 : 1);\n\t\tconst newCounter = occurrences.get(stringLower) || 2;\n\t\tif (newCounter >= 2 || numberless > 2) {\n\t\t\tstring = `${string}-${newCounter}`;\n\t\t}\n\n\t\treturn string;\n\t};\n\n\tcountable.reset = () => {\n\t\toccurrences.clear();\n\t};\n\n\treturn countable;\n}\n"]},"metadata":{},"sourceType":"module"}